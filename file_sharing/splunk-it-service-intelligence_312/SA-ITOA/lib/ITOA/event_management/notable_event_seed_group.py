# Copyright (C) 2005-2018 Splunk Inc. All Rights Reserved.

import json
import uuid

from base_event_management import BaseEventManagement
from ITOA.setup_logging import setup_logging
from splunk.appserver.mrsparkle.lib import i18n

class NotableEventSeedGroup(BaseEventManagement):
    """
    Class to create, update, get and delete Seed groups generated by ACE
    {
        _key: Random key
        _user: <user id>,
        factors: <Array of facors to generate groups>,
        event_count: <count of events in group>,
        level: <level for group>,
        threshold: <threshold for group>,
        membership_strength: <membership strength of group>,
        object_type: notable_event_seed_group
    }

    """

    def __init__(self, session_key, collection='itsi_correlation_engine_group_template',
                 object_type='notable_event_seed_group', user='nobody', current_user_name=None, **kwargs):
        """
        Initialize
        @param session_key: session key
        @param collection: collection name
        @param object_type: object type
        @param user: user context to save
        @param kwargs: extra args
        @return:
        """

        # Initialized base event object
        super(NotableEventSeedGroup, self).__init__(
            session_key, collection, object_type, user, current_user_name=current_user_name
        )
        self.logger = setup_logging('itsi_event_management.log', 'itsi.notable_event.seed_group')

    def convert_search_data_to_group_data(self, search_data):
        """
        Will change the search object passed into the proper json structure for storing in the KV Store

        @type search_data: dict
        @param search_data: the search data to be converted
        """
        search_data['_key'] = str(uuid.uuid1())
        search_data['level'] = int(search_data['level']) if search_data.get('level', None) is not None else None
        search_data['event_count'] = int(search_data['event_count']) if search_data.get('event_count', None) is not None else None
        search_data['threshold'] = int(search_data['threshold']) if search_data.get('threshold', None) is not None else None
        search_data['membership_strength'] = float(search_data['membership_strength']) if search_data.get('membership_strength', None) is not None else None
        if any(search_data[k] is None for k in ('level', 'event_count', 'threshold', 'membership_strength')):
            raise Exception(_('Invalid data for search data conversion to seed group'))
        search_data['policy_id'] = search_data.get('policy_id') if search_data.get('policy_id', None) is not None else None
        search_data['policy_name'] = search_data.get('policy_name') if search_data.get('policy_name', None) is not None else None
        search_data.pop('event_ids', None)
        search_data.pop('description', None)
        search_data.pop('topology_name', None)

        # This will iterate through all keys which have the text _factors in them and make an object with them to be stre in kvstore
        factors = []
        factor_keys = [key for key, value in search_data.items() if key.lower().endswith('_factors')]
        for key in factor_keys:
            factor_data = search_data.pop(key, None)
            if factor_data is None:
                raise Exception(_('Invalid factor for seed group'))
            factors.append(
                {
                    'factor_name': key[:-8],
                    'meta_data': factor_data
                }
            )
        search_data['factors'] = factors
