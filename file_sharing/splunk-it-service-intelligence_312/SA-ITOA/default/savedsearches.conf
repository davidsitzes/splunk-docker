#Splunk environment saved searches
[IT Service Intelligence - Get splunk indexer entities]
description             = Get a list of splunk indexers, which can later be used to populate the IT Service Intelligence splunk service
search                  = | rest /services/server/info | fillnull | table splunk_server,serverName,server_roles* | eval role=if($server_roles.search_peer$=="0","","search_peer") |  eval role=if($server_roles.search_head$=="0",role,"search_head") | eval role=if($server_roles.indexer$=="0",role,role+";indexer") | makemv delim=";" allowempty=t role | table serverName,role | search role=indexer
disabled                = 0
request.ui_dispatch_app = itsi

[IT Service Intelligence - Get splunk search head entities]
description             = Get a list of splunk search heads, which can later be used to populate the IT Service Intelligence splunk service
search                  = | rest /services/server/info | fillnull | table splunk_server,serverName,server_roles* | eval role=if($server_roles.search_peer$=="0","","search_peer") |  eval role=if($server_roles.search_head$=="0",role,"search_head") | eval role=if($server_roles.indexer$=="0",role,role+";indexer") | makemv delim=";" allowempty=t role | table serverName,role | search role=search_head
disabled                = 0
request.ui_dispatch_app = itsi

[IT Service Intelligence - Get splunk search peer entities]
description             = Get a list of splunk search peers, which can later be used to populate the IT Service Intelligence splunk service
search                  = | rest /services/server/info | fillnull | table splunk_server,serverName,server_roles* | eval role=if($server_roles.search_peer$=="0","","search_peer") |  eval role=if($server_roles.search_head$=="0",role,"search_head") | eval role=if($server_roles.indexer$=="0",role,role+";indexer") | makemv delim=";" allowempty=t role | table serverName,role | search role=search_peer
disabled                = 0
request.ui_dispatch_app = itsi

[IT Service Intelligence - Get splunk forwarder entities]
description             = Get a list of splunk forwarders, which can later be used to populate the IT Service Intelligence splunk service
search                  = index=_internal source=*metrics.log* group=tcpin_connections | stats values(hostname) as hostname, values(sourceHost) as sourcehost by host | mvexpand hostname | table hostname | dedup hostname
disabled                = 0
request.ui_dispatch_app = itsi

#Netapp app saved searches
[IT Service Intelligence - Get Netapp controllers]
description             = Retrieves a list of Netapp controllers, for use importing into IT Service Intelligence as entities
search                  = source=SystemPerfHandler | table host | dedup host | rename host AS dest
request.ui_dispatch_app = itsi

[IT Service Intelligence - Get Netapp Vservers]
description             = Retrieves a list of Netapp Vservers from the Netapp App, for use for importing into IT Service Intelligence as entities
search                  = sourcetype=ontap:system is-clustered=true | dedup host | table host |rename host AS dest
request.ui_dispatch_app = itsi

[IT Service Intelligence - Get Netapp volumes]
description             = Retrieves a list of volumes from the Netapp App, for use importing into IT Service Intelligence as entities
search                  = sourcetype=ontap:volume | eval dest = host + ":" + name | dedup dest | table dest
request.ui_dispatch_app = itsi

[IT Service Intelligence - Get Netapp aggregates]
description = Retrieves a list of aggregates from the Netapp App, for use into importing into IT Service Intelligence as entities.
search = sourcetype=ontap:aggr | eval dest = host + ":" + name | dedup dest | table dest
request.ui_dispatch_app  = itsi

[IT Service Intelligence - Get Netapp disks]
description             = Retrieves a list of disks from the Netapp App, for use into importing into IT Service Intelligence as entities.
search                  = sourcetype=ontap:disk | eval dest = host + ":" + name | dedup dest | table dest
request.ui_dispatch_app = itsi

#*NIX searches
[IT Service Intelligence - Linux, Unix, Solaris, and OSX hosts]
description             = Collect the *nix hosts provided through the TA-nix app for entry into IT Service Intelligence
search                  = | datamodel Performance CPU search | search All_Performance.tag=unix | dedup All_Performance.dest | table All_Performance.dest | rename All_Performance.dest AS dest
request.ui_dispatch_app = itsi

#VMware saved searches
[IT Service Intelligence - Get VMware Datacenters]
description             = Get the VMWware Datacenters and format them in a way that is appropriate for IT Service Intelligence
search                  = sourcetype=vmware:inv:hierarchy type=ClusterComputeResource | spath changeSet.runtime.host.moid output=vmhost | spath moid output=moid | spath type output=type | spath changeSet.name output=name | search (type!="Datastore" type!="VirtualApp" type!="ResourcePool" type!="Folder" type!="ComputeResource") OR (name!="host" type="Folder" name!="vm" name!="datastore" name!="network" name!="Local Storage" name!="Discovered virtual machine") | spath changeSet.parent.moid output=parent | spath changeSet.parent.type output=parentType | spath rootFolder.moid output=rootFolderMoid | eval parent=if(type="VirtualMachine", vmhost, parent) | eval parentType=if(type="VirtualMachine", "HostSystem", if(parent=rootFolderMoid, "RootFolder", parentType)) | stats first(_time) as _time first(name) as name first(type) as type first(parent) as parent first(parentType) as parentType first(rootFolderMoid) as rootFolderMoid by host, moid | table host moid name type rootFolderMoid
request.ui_dispatch_app = itsi

[IT Service Intelligence - Get VMware HostSystems]
description             = Get the VMWware ESX\ESXi host systems and format them in a way that is appropriate for IT Service Intelligence
search = sourcetype=vmware:inv:hierarchy type=HostSystem | spath changeSet.runtime.host.moid output=vmhost | spath moid output=moid | spath type output=type | spath changeSet.name output=name | search (type!="Datastore" type!="VirtualApp" type!="ResourcePool" type!="Folder" type!="ComputeResource") OR (name!="host" type="Folder" name!="vm" name!="datastore" name!="network" name!="Local Storage" name!="Discovered virtual machine") | spath changeSet.parent.moid output=parent | spath changeSet.parent.type output=parentType | spath rootFolder.moid output=rootFolderMoid | eval parent=if(type="VirtualMachine", vmhost, parent) | eval parentType=if(type="VirtualMachine", "HostSystem", if(parent=rootFolderMoid, "RootFolder", parentType)) | stats first(_time) as _time first(name) as name first(type) as type first(parent) as parent first(parentType) as parentType first(rootFolderMoid) as rootFolderMoid by host, moid | table host moid name type rootFolderMoid
request.ui_dispatch_app = itsi

[IT Service Intelligence - Get VMware Virtual Machines]
description             = Get the VMWware Virtual Machines and format them in a way that is appropriate for IT Service Intelligence
search                  = sourcetype=vmware:inv:hierarchy type=VirtualMachine | spath changeSet.runtime.host.moid output=vmhost | spath moid output=moid | spath type output=type | spath changeSet.name output=name | search (type!="Datastore" type!="VirtualApp" type!="ResourcePool" type!="Folder" type!="ComputeResource") OR (name!="host" type="Folder" name!="vm" name!="datastore" name!="network" name!="Local Storage" name!="Discovered virtual machine") | spath changeSet.parent.moid output=parent | spath changeSet.parent.type output=parentType | spath rootFolder.moid output=rootFolderMoid | eval parent=if(type="VirtualMachine", vmhost, parent) | eval parentType=if(type="VirtualMachine", "HostSystem", if(parent=rootFolderMoid, "RootFolder", parentType)) | stats first(_time) as _time first(name) as name first(type) as type first(parent) as parent first(parentType) as parentType first(rootFolderMoid) as rootFolderMoid by host, moid | table host moid name type rootFolderMoid
request.ui_dispatch_app = itsi

#Windows app saved searches
[IT Service Intelligence - Get Windows hosts]
description             = Retrieves a list of hosts generating Windows host data
search                  = | datamodel Compute_Inventory OS search | search All_Inventory.tag=windows | dedup All_Inventory.dest | rename All_Inventory.dest AS dest | table dest
request.ui_dispatch_app = itsi

#CIM network discovery saved searches
[IT Service Intelligence - Get IP addresses]
description             = Get a list of all known IP addresses from the CIM Inventory and Network Traffic data models
search                  = | tstats count FROM datamodel=Network_Traffic by All_Traffic.src_ip, All_Traffic.dest_ip | rename All_Traffic.src_ip AS src_ip, All_Traffic.dest_ip AS dest_ip | dedup src_ip dest_ip | eval all_ips = src_ip + ";" + dest_ip | makemv delim=";" all_ips | mvexpand all_ips | table all_ips | append [|tstats count FROM datamodel=Compute_Inventory by Network.ip | rename Network.ip AS all_ips | dedup all_ips | table all_ips] | dedup all_ips

[IT Service Intelligence - Get IP addresses by MAC address]
description             = Get a list of all known MAC addresses and their associated IP addresses in a multivalue field
search                  = | tstats count FROM datamodel=Network_Traffic by All_Traffic.src_ip, All_Traffic.src_mac |rename All_Traffic.src_ip AS ip | rename All_Traffic.src_mac AS mac | table ip, mac | append [| tstats count FROM datamodel=Network_Traffic by All_Traffic.dest_ip, All_Traffic.dest_mac |rename All_Traffic.dest_ip AS ip, All_Traffic.dest_mac AS mac | table ip, mac ] | append [| tstats count FROM datamodel=Compute_Inventory by Network.ip, Network.mac | rename Network.ip AS ip, Network.mac AS mac | table ip, mac ] | mvcombine delim=";" ip | dedup mac

[IT Service Intelligence - Get VMware Datacenters]
description             = Get the VMWware Datacenters and format them in a way that is appropriate for ITSI
search                  = sourcetype=vmware:inv:hierarchy type=ClusterComputeResource | spath changeSet.runtime.host.moid output=vmhost | spath moid output=moid | spath type output=type | spath changeSet.name output=name | search (type!="Datastore" type!="VirtualApp" type!="ResourcePool" type!="Folder" type!="ComputeResource") OR (name!="host" type="Folder" name!="vm" name!="datastore" name!="network" name!="Local Storage" name!="Discovered virtual machine") | spath changeSet.parent.moid output=parent | spath changeSet.parent.type output=parentType | spath rootFolder.moid output=rootFolderMoid | eval parent=if(type="VirtualMachine", vmhost, parent) | eval parentType=if(type="VirtualMachine", "HostSystem", if(parent=rootFolderMoid, "RootFolder", parentType)) | stats first(_time) as _time first(name) as name first(type) as type first(parent) as parent first(parentType) as parentType first(rootFolderMoid) as rootFolderMoid by host, moid | table host moid name type rootFolderMoid

[IT Service Intelligence - Get VMware HostSystems]
description             = Get the VMWware ESX\ESXi host systems and format them in a way that is appropriate for ITSI
search                  = sourcetype=vmware:inv:hierarchy type=HostSystem | spath changeSet.runtime.host.moid output=vmhost | spath moid output=moid | spath type output=type | spath changeSet.name output=name | search (type!="Datastore" type!="VirtualApp" type!="ResourcePool" type!="Folder" type!="ComputeResource") OR (name!="host" type="Folder" name!="vm" name!="datastore" name!="network" name!="Local Storage" name!="Discovered virtual machine") | spath changeSet.parent.moid output=parent | spath changeSet.parent.type output=parentType | spath rootFolder.moid output=rootFolderMoid | eval parent=if(type="VirtualMachine", vmhost, parent) | eval parentType=if(type="VirtualMachine", "HostSystem", if(parent=rootFolderMoid, "RootFolder", parentType)) | stats first(_time) as _time first(name) as name first(type) as type first(parent) as parent first(parentType) as parentType first(rootFolderMoid) as rootFolderMoid by host, moid | table host moid name type rootFolderMoid

[IT Service Intelligence - Get VMware Virtual Machines]
description             = Get the VMWware Virtual Machines and format them in a way that is appropriate for ITSI
search                  = sourcetype=vmware:inv:hierarchy type=VirtualMachine | spath changeSet.runtime.host.moid output=vmhost | spath moid output=moid | spath type output=type | spath changeSet.name output=name | search (type!="Datastore" type!="VirtualApp" type!="ResourcePool" type!="Folder" type!="ComputeResource") OR (name!="host" type="Folder" name!="vm" name!="datastore" name!="network" name!="Local Storage" name!="Discovered virtual machine") | spath changeSet.parent.moid output=parent | spath changeSet.parent.type output=parentType | spath rootFolder.moid output=rootFolderMoid | eval parent=if(type="VirtualMachine", vmhost, parent) | eval parentType=if(type="VirtualMachine", "HostSystem", if(parent=rootFolderMoid, "RootFolder", parentType)) | stats first(_time) as _time first(name) as name first(type) as type first(parent) as parent first(parentType) as parentType first(rootFolderMoid) as rootFolderMoid by host, moid | table host moid name type rootFolderMoid

#TA-nix
[IT Service Intelligence - Linux and Unix hosts]
description             = Collect the unix and linux hosts provided through the TA-nix app for entry into ITSI
search                  = sourcetype=Linux:* OR sourcetype=Unix:* | dedup host | table host

[IT Service Intelligence - Solaris hosts]
description             = Collect the solaris hosts provided through the TA-nix app for entry into ITSI
search                  = sourcetype=Solaris:* | dedup host | table host

[IT Service Intelligence - OS X hosts]
description             = Collect the OS X hosts provided through the TA-nix app for entry into ITSI
search                  = sourcetype=OSX:* | dedup host | table host

###### Lookup Generating Searches ######
[IT Service Intelligence - User Realnames - Lookup Gen]
cron_schedule            = */10 * * * *
disabled                 = False
dispatch.latest_time     = +0s
enableSched              = 1
is_visible               = false
run_on_startup           = true
search                   = | rest splunk_server=local count=0 /services/authentication/users | rename title as user | eval _key=user | eval realname=if(isnull(realname) or realname="", null(), realname) | table _key user realname | outputlookup itsi_user_realnames_lookup | stats count


### Search to group events ###
[itsi_event_grouping]
cron_schedule = * * * * *
disabled = 0
dispatch.earliest_time = rt
dispatch.indexedRealtime = 1
dispatch.latest_time = rt
enableSched = 1
search = `itsi_event_management_index_with_close_events` | fields _time, _raw, source, sourcetype | itsirulesengine | where 1=2

### Search to find duplicated alias in entity ###
[itsi_find_dup_alias]
cron_schedule 			 = 0 0 * * *
disabled 				 = 0
dispatch.latest_time     = +0s
enableSched              = 1
is_visible               = false
search = | inputlookup itsi_entities | eval identical_alias='identifier.values'   | mvexpand identical_alias | eval entity_key=_key 
| stats count AS duplicate_occurences  values(title) AS entity_name values(services._key) AS service_keys  values(entity_key) AS entity_keys  by identical_alias | where duplicate_occurences>1 | itsicheckfordupalias
