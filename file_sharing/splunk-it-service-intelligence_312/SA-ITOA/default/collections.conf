## Collection for storing following knowledge objects - service, entity
[itsi_services]
accelerated_fields.identifying_name_accel = {"identifying_name": 1}
accelerated_fields.identifier_values_accel = {"identifier.values": 1}

## Collection for storing service template objects
[itsi_base_service_template]
accelerated_fields.identifying_name_accel = {"identifying_name": 1}

## Collection for storing teams
[itsi_team]
accelerated_fields.identifying_name_accel = {"identifying_name": 1}

## Collection for storing following ITSI knowledge objects - glass table, deep dive
[itsi_pages]
accelerated_fields.identifying_name_accel = {"identifying_name": 1}

## Collection for storing following ITSI knowledge objects - service analyzer
[itsi_service_analyzer]


## Collection for storing following ITSI migration data
[itsi_migration]

## Job queue for the ITSI refresher modular input.
[itsi_refresh_queue]
accelerated_fields.create_time_accel = {"create_time": 1}

## Data structures for the ITSI KPI backfill jobs.  Used to submit backfill requests from the client;
## consumed and/or updated by the backfill job processor modular input.
[itsi_backfill]

## Temporary storage for KPIs being edited but not yet saved, for use in adaptive thresholding
[itsi_temporary_storage]

## Collection for storing maintenance calendars, configuration for maintenance windows
[maintenance_calendar]
accelerated_fields.start_time_accel = {"start_time": -1}

[operative_maintenance_log]
accelerated_fields.maintenance_object_key_accel = {"maintenance_object_key": 1}

## Store notable event tags and comments
## Define notable schema tag here
[itsi_notable_event_tag]
field.create_time = time
field.mod_time = time
field.event_id = string
field.tag_name = string
accelerated_fields.default = {"tag_name": 1}

[itsi_notable_event_comment]
field.create_time = time
field.mod_time = time
field.event_id = string
field.comment = string

## Collection which is used to store notable event alerts group state
[itsi_notable_event_group]


## Collection that acts as a queue to execute notable event actions from the
## Rules Engine
[itsi_notable_event_actions_queue]
accelerated_fields.create_time_accel = {"create_time": 1}

## Temporary queue to claim batch id
[itsi_temp_batch_claimed_action_queue]


## Collection used to store updates to notable event state
[itsi_notable_event_state]

## Store ITSI event management object
[itsi_event_management]


## Store information about external tickets corresponding to an ITSI Notable Event
[itsi_notable_event_ticketing]

#### Stale collection, can be removed after 2.2. We needed for migration old stuff to new
## Collection had used for storing following ITSI knowledge objects - correlation search
[itsi_correlation_search]

## Job queue for ITSI backup and restore
[itsi_backup_restore_queue]

## Store Rules and Policies pertaining to Notables and other objects
[itsi_notable_event_aggregation_policy]

## Save existing users on the system in this collection. Used by Notable Event
# Viewer
[itsi_user_realnames]
field.user     = string
field.realname = string

## Collection to store group templates identified by analysing historical notable events
[itsi_correlation_engine_group_template]

## Collection for storing entity relationships
[itsi_entity_relationships]
accelerated_fields.source_pre_accel = {"subject_identifier": 1, "predicate": 1}
accelerated_fields.object_pre_accel = {"object_identifier": 1, "predicate": 1}
accelerated_fields.triple_accel = {"subject_identifier": 1, "object_identifier": 1, "predicate": 1}

## Collection for storing entity relationship rules
[itsi_entity_relationship_rules]

## Collection for storing files as base64 encoded strings - shared component
[SA-ITOA_files]



## Collection for storing files as base64 encoded strings - shared component
[SA-ITOA_icon_collection]

